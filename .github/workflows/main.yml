name: Provision Environment

on:
  workflow_dispatch:
    inputs:
      deployLevel:
        description: 'Deployment level'
        required: true
        default: 'Plan'
        type: choice
        options:
          - Plan
          - Apply

env:
  NODE_EXTRA_CA_CERTS: '/etc/ssl/certs/ca-certificates.crt'
  ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
  TF_VERSION: 1.4.6

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash

jobs:
  base_provision:
    name: 'Provision Base'
    runs-on: ${{ github.ref == 'refs/heads/main' && fromJSON('self-hosted-dev') || 'ubuntu-20.04' }}
 
    steps:
    - name: Cleaning Repository
      run: |
        sudo chown -R $USER:$USER $GITHUB_WORKSPACE

    # Provision Base Infrastructure      
    - name: Checkout
      uses: actions/checkout@v2
 
    - name: 'Terraform Format Base'
      uses: ./actions/terraform
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'fmt'
        tf_actions_working_dir: "./terraform/base"
         
    - name: 'Terraform Init Base'
      uses: ./actions/terraform
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: "./terraform/base"
 
    - name: 'Terraform Plan Base'
      uses: ./actions/terraform
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: "./terraform/base"
 
    - name: 'Terraform Apply Base'
      if: ${{ github.event.inputs.deployLevel == 'Apply' }}
      uses: ./actions/terraform
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: "./terraform/base"

    # Workflow always fail here when password changed
    - name: Login to ACR
      if: ${{ github.event.inputs.deployLevel == 'Apply' }}
      uses: ./actions/docker-login
      with:
        registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build image and push it to ACR
      if: ${{ github.event.inputs.deployLevel == 'Apply' }}
      uses: ./actions/docker-build-push
      with:
        push: true
        tags: ${{ secrets.REGISTRY_LOGIN_SERVER }}/aspcoresample:${{ github.sha }}
        file: aspnet-core-dotnet-core/Dockerfile

  aca_provision:
    name: Provision ACA
    if: ${{ always() }}
    needs: [base_provision]
    runs-on: ${{ github.ref == 'refs/heads/main' && fromJSON('self-hosted-dev') || 'ubuntu-20.04' }}
    
    steps:
    # Apply the Azure Container environment and App.
    - name: Checkout
      uses: actions/checkout@v2

    - name: 'Terraform Format ACA'
      uses: ./actions/terraform
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'fmt'
        tf_actions_working_dir: "./terraform/containerapp"
         
    - name: 'Terraform Init ACA'
      uses: ./actions/terraform
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: "./terraform/containerapp"
        args: '-var="GITHUB_SHA=${{ github.sha }}"'

    - name: 'Terraform Plan ACA'
      uses: ./actions/terraform
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: "./terraform/containerapp"
        args: '-var="GITHUB_SHA=${{ github.sha }}"'
 
    - name: 'Terraform Apply ACA'
      if: ${{ github.event.inputs.deployLevel == 'Apply' }}
      uses: ./actions/terraform
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: "./terraform/containerapp"
        args: '-var="GITHUB_SHA=${{ github.sha }}"'

  aks_provision:
    name: Provision AKS
    if: ${{ always() }}
    needs: [base_provision]
    runs-on: ${{ github.ref == 'refs/heads/main' && fromJSON('self-hosted-dev') || 'ubuntu-20.04' }}
    
    steps:
    # Create AKS Cluster      
    - name: Checkout
      uses: actions/checkout@v2
 
    - name: 'Terraform Format Base'
      uses: ./actions/terraform
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'fmt'
        tf_actions_working_dir: "./terraform/aks"
         
    - name: 'Terraform Init Base'
      uses: ./actions/terraform
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: "./terraform/aks"
 
    - name: 'Terraform Plan Base'
      uses: ./actions/terraform
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: "./terraform/aks"
 
    - name: 'Terraform Apply Base'
      if: ${{ github.event.inputs.deployLevel == 'Apply' }}
      uses: ./actions/terraform
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: "./terraform/aks"